{"version":3,"sources":["components/TabBar.js","components/InputField.js","components/Button.js","components/Task.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TabBar","props","homeClass","classNames","active","activeState","completeClass","inCompleteClass","react_default","a","createElement","className","onClick","setActiveState","InputList","label","toLowerCase","onSubmit","evt","type","placeholder","value","userInput","onChange","event","handleChange","Button","id","Task","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeEditedContent","setState","editedContent","target","handelEditButtonClick","newEdit","state","edit","todo","_this2","spanClass","completed","done","buttonClass","undo","complete","InputField","handleEdit","class","handleComplete","components_Button","handleDelete","React","Component","TaskList","filteredContent","todos","filter","indexOf","searchField","list","toConsumableArray","length","map","components_Task","key","handleSubmit","changeInput","App","preventDefault","newTodo","Date","now","concat","handleClick","indexx","findIndex","changeSearch","handleSearch","storageData","window","localStorage","getItem","JSON","parse","clear","setItem","stringify","components_TabBar","components_TaskList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a8364d3.chunk.js","sourcesContent":["import React from 'react';\n\nimport classNames from 'classnames';\n\nconst TabBar = props => {\n  var homeClass = classNames('tablinks', {\n    active: props.activeState === 'Home'\n  });\n\n  var completeClass = classNames('tablinks', {\n    active: props.activeState === 'Completed'\n  });\n\n  var inCompleteClass = classNames('tablinks', {\n    active: props.activeState === 'Incomplete'\n  });\n  return (\n    <div className='tabs'>\n      <div className={homeClass} onClick={() => props.setActiveState('Home')}>\n        Home\n      </div>\n      <div\n        className={completeClass}\n        onClick={() => props.setActiveState('Completed')}\n      >\n        Completed\n      </div>\n      <div\n        className={inCompleteClass}\n        onClick={() => props.setActiveState('Incomplete')}\n      >\n        Incomplete\n      </div>\n    </div>\n  );\n};\n\nexport default TabBar;\n","import React from 'react';\n\n/**\n *\n *\n * @param {objects} props\n * @returns {Dom of Input field}\n */\n\nconst InputList = props => {\n  return (\n    <div className={props.label.toLowerCase()}>\n      <form onSubmit={evt => props.onSubmit(evt)}>\n        <input\n          type='text'\n          placeholder={props.label}\n          value={props.userInput}\n          onChange={event => props.handleChange(event)}\n        />\n        <button>{props.label}</button>\n      </form>\n    </div>\n  );\n};\n\nexport default InputList;\n","import React from 'react';\n\nconst Button = props => {\n  return (\n    <button\n      className={props.value}\n      onClick={() => props.onClick(props.id)}\n    />\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport Button from './Button';\nimport Input from './InputField';\nimport classNames from 'classnames';\n\n/**\n  * This is the main Class.\n  */\nclass Task extends React.Component {\n \n  /**\n   * @param {object} props\n   * @memberof Task\n   */\n  constructor(props) {\n    super();\n\n    this.state = {\n      editedContent: props.todo.value,\n      edit: false\n    };\n  }\n  render() {\n    const spanClass =classNames('tasks', {\n      completed:this.props.todo.done\n    });\n\n    var buttonClass = classNames({\n      'undo':this.props.todo.done,\n      'complete':!this.props.todo.done\n    })\n    if (!this.state.edit) {\n      return (\n        <li className='task clearfix'>\n          <span className={spanClass}>\n            {this.props.todo.value}\n          </span>\n          <div class='buttons'>\n            <button\n              className={buttonClass }\n              onClick={() => this.props.handleComplete(this.props.id)}\n            />\n            <Button\n              value='delete'\n              onClick={this.props.handleDelete}\n              id={this.props.id}\n            />\n            <Button value='edit' onClick={this.handelEditButtonClick} />\n          </div>\n        </li>\n      );\n    } else {\n      return (\n        <li className='task clearfix'>\n          <Input\n            userInput={this.state.editedContent}\n            label='Save'\n            edit={this.state.edit}\n            onSubmit={event => {\n              this.props.handleEdit(\n                event,\n                this.props.id,\n                this.handelEditButtonClick,\n                this.state.editedContent\n              );\n            }}\n            handleChange={this.changeEditedContent}\n          />\n      </li>\n      );\n    }\n  }\n\n  /**\n   *\n   *\n   * @param {*} evt\n   */\n  changeEditedContent = (evt) => {\n    this.setState({\n      editedContent: evt.target.value\n    });\n  };\n\n\n  handelEditButtonClick = () => {\n    const newEdit = !this.state.edit;\n\n    this.setState({\n      edit: newEdit\n    });\n  };\n\n}\n\nexport default Task;\n","import React from 'react';\n\nimport Task from './Task';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nconst TaskList = props => {\n\n  const filteredContent = props.todos.filter(todo => {\n    return todo.value.indexOf(props.searchField) !== -1;\n  });\n\n  let list = null;\n\n  if (props.activeState === 'Completed') {\n    list = filteredContent.filter(todo => todo.done);\n  } else if (props.activeState === 'Incomplete') {\n    list = filteredContent.filter(todo => !todo.done);\n  } else {\n    list = [...filteredContent];\n  }\n\n  if (list.length !== 0) {\n    return (\n      <ul>\n    \n        {list.map(todo => {\n          return (\n            <Task\n              key={todo.id}\n              id={todo.id}\n              todo={todo}\n              handleSubmit={props.handleSubmit}\n              handleComplete={props.handleComplete}\n              handleDelete={props.handleDelete}\n              handleEdit={props.handleEdit}\n              changeInput={props.changeInput}\n              userInput={props.userInput}\n            />\n          );\n        })}\n        \n      </ul>\n    );\n  } \n    \n  return <div className=\"notodo\">No Todo Lists To Show</div>;\n  \n};\n\nexport default TaskList;\n","import React, { Component } from 'react';\n\nimport './assets/css/reset.css';\nimport './assets/css/layout.css';\nimport Tab from './components/TabBar';\nimport Input from './components/InputField';\nimport TaskList from './components/TaskList';\n\n/**\n * Main class component.\n *\n * @class App\n * @extends {Component}\n */\nclass App extends Component {\n\n  constructor() {\n    super();\n\n\n    this.state = {\n      searchField: '',\n      active: 'Home',\n      userInput: '',\n      todos: []\n    };\n  }\n\n  componentDidMount(){\n    const storageData = window.localStorage.getItem('todoData');\n    const todos = storageData ? JSON.parse(storageData) : [];\n    this.setState({\n      todos: todos\n    })\n  }\n\n  componentDidUpdate(){\n    window.localStorage.clear();\n    window.localStorage.setItem('todoData', JSON.stringify(this.state.todos));\n  }\n\n  changeInput = event => {\n    this.setState({\n      userInput: event.target.value\n    });\n  };\n\n  handleSubmit = evt => {\n    evt.preventDefault();\n\n    const newTodo = {\n      id: Date.now(),\n      value: this.state.userInput,\n      done: false\n    };\n    const todos = [...this.state.todos, newTodo];\n\n    this.setState({\n      todos,\n      userInput: ''\n    });\n  };\n\n  handleEdit = (evt, id, handleClick, editedContent) => {\n    evt.preventDefault();\n    const todos = [...this.state.todos];\n    const indexx = todos.findIndex(todo => todo.id === id);\n\n    todos[indexx].value = editedContent;\n    todos[indexx].done = this.state.todos[indexx].done;\n\n    this.setState({ todos });\n    handleClick();\n  };\n\n  handleDelete = id => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    });\n\n    this.setState({ todos });\n  };\n\n  handleComplete = id => {\n    const todos = this.state.todos;\n    const indexx = todos.findIndex(todo => todo.id === id);\n\n    todos[indexx].done = !todos[indexx].done;\n\n    this.setState({ todos });\n  };\n\n  setActiveState = active => {\n    this.setState({\n      active\n    });\n  };\n\n  changeSearch = evt => {\n    this.setState({\n      searchField: evt.target.value\n    });\n  };\n\n  handleSearch = evt => {\n    evt.preventDefault();\n\n    this.setState({\n      searchField: ''\n    });\n  };\n\n  render() {\n\n    return (\n      <div className='App clearfix'>\n        <div className='header clearfix'>\n          <h1>Todolist</h1>\n          <Input\n            label='search'\n            userInput={this.state.searchField}\n            onSubmit={this.handleSearch}\n            handleChange={this.changeSearch}\n          />\n        </div>\n\n        <Input\n          handleChange={this.changeInput}\n          userInput={this.state.userInput}\n          onSubmit={this.handleSubmit}\n          label='Add'\n        />\n        <Tab\n          setActiveState={this.setActiveState}\n          activeState={this.state.active}\n        />\n\n        <TaskList\n          searchField={this.state.searchField}\n          activeState={this.state.active}\n          todos={this.state.todos}\n          handleSubmit={this.handleSubmit}\n          userInput={this.state.userInput}\n          handleComplete={this.handleComplete}\n          handleDelete={this.handleDelete}\n          handleEdit={this.handleEdit}\n          changeInput={this.changeInput}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}