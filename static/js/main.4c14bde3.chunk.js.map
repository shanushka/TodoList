{"version":3,"sources":["components/TabBar.js","components/InputField.js","components/Button.js","components/Task.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TabBar","props","react_default","a","createElement","className","activeState","onClick","setActiveState","InputList","value","onSubmit","evt","type","placeholder","userInput","onChange","event","handleChange","Button","index","Task","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeEditedContent","setState","editedContent","target","handelEditButtonClick","newEdit","state","edit","todo","_this2","InputField","handleEdit","done","class","handleComplete","components_Button","handleDelete","React","Component","TaskList","console","log","todos","filteredContent","filter","indexOf","searchField","list","toConsumableArray","length","map","components_Task","key","id","handleSubmit","changeInput","App","newTodo","Date","now","concat","preventDefault","handleClick","indexx","findIndex","active","changeSearch","handleSearch","storageData","window","localStorage","getItem","JSON","parse","clear","setItem","stringify","components_TabBar","components_TaskList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c14bde3.chunk.js","sourcesContent":["import React from 'react';\n\nconst TabBar = props => {\n  return (\n    <div className='Tabs'>\n      <div\n        className={\n          props.activeState === 'Home' ? 'tablinks active' : 'tablinks'\n        }\n        onClick={() => props.setActiveState('Home')}\n      >\n        Home\n      </div>\n      <div\n        className={\n          props.activeState === 'Completed' ? 'tablinks active' : 'tablinks'\n        }\n        onClick={() => props.setActiveState('Completed')}\n      >\n        Completed\n      </div>\n      <div\n        className={\n          props.activeState === 'Incomplete' ? 'tablinks active' : 'tablinks'\n        }\n        onClick={() => props.setActiveState('Incomplete')}\n      >\n        Incomplete\n      </div>\n    </div>\n  );\n};\nexport default TabBar;\n","import React from 'react';\n\nconst InputList = props => {\n  return (\n    <div className={props.value}>\n      <form onSubmit={evt => props.onSubmit(evt)}>\n        <input\n          type='text'\n          placeholder={props.value}\n          value={props.userInput}\n          onChange={event => props.handleChange(event)}\n        />\n        <button>{props.value}</button>\n      </form>\n    </div>\n  );\n};\n\nexport default InputList;\n","import React from 'react';\n\nconst Button = props => {\n  return (\n    <button\n      className={props.value}\n      onClick={() => props.onClick(props.index)}\n    />\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport Button from './Button';\nimport Input from './InputField';\n\nclass Task extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      editedContent: props.todo.value,\n      edit: false\n    };\n  }\n\n  render() {\n    if (!this.state.edit) {\n      return (\n        <div className='task clearfix'>\n          <span className={this.props.todo.done ? 'tasks complete' : 'tasks'}>\n            {this.props.todo.value}\n          </span>\n          <div class='buttons'>\n            <button\n              className={this.props.todo.done ? 'Undo' : 'Complete'}\n              onClick={() => this.props.handleComplete(this.props.index)}\n            />\n            <Button\n              value='delete'\n              onClick={this.props.handleDelete}\n              index={this.props.index}\n            />\n            <Button value='edit' onClick={this.handelEditButtonClick} />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className='task clearfix'>\n          <Input\n            userInput={this.state.editedContent}\n            value='Save'\n            edit={this.state.edit}\n            index={this.props.index}\n            onSubmit={event => {\n              this.props.handleEdit(\n                event,\n                this.props.index,\n                this.handelEditButtonClick,\n                this.state.editedContent\n              );\n            }}\n            handleChange={evt => {\n              this.changeEditedContent(evt);\n            }}\n          />\n        </div>\n      );\n    }\n  }\n  changeEditedContent = evt => {\n    this.setState({\n      editedContent: evt.target.value\n    });\n  };\n\n  handelEditButtonClick = () => {\n    let newEdit = !this.state.edit;\n    this.setState({\n      edit: newEdit\n    });\n  };\n}\n\nexport default Task;\n","import React from 'react';\n\nimport Task from './Task';\n\nconst TaskList = props => {\n  console.log(props.todos);\n\n  let filteredContent = props.todos.filter(todo => {\n    return todo.value.indexOf(props.searchField) !== -1;\n  });\n\n  let list = null;\n  if (props.activeState == 'Completed') {\n    list = filteredContent.filter(todo => todo.done);\n  } else if (props.activeState == 'Incomplete') {\n    list = filteredContent.filter(todo => !todo.done);\n  } else {\n    list = [...filteredContent];\n  }\n  if (list.length != 0) {\n    return (\n      <div>\n        {list.map(todo => {\n          return (\n            <Task\n              key={todo.id}\n              index={todo.id}\n              todo={todo}\n              handleSubmit={props.handleSubmit}\n              handleComplete={props.handleComplete}\n              handleDelete={props.handleDelete}\n              handleEdit={props.handleEdit}\n              changeInput={props.changeInput}\n              userInput={props.userInput}\n            />\n          );\n        })}\n      </div>\n    );\n  } else {\n    return <div className=\"notodo\">No Todo Lists To Show</div>;\n  }\n};\n\nexport default TaskList;\n","import React, { Component } from 'react';\n\nimport './assets/css/layout.css';\nimport Tab from './components/TabBar';\nimport Input from './components/InputField';\nimport TaskList from './components/TaskList';\n\nclass App extends Component {\n  constructor() {\n    super();\n    const storageData = window.localStorage.getItem('todoData');\n    const todos = storageData ? JSON.parse(storageData) : [];\n\n    this.state = {\n      searchField: '',\n      active: 'Home',\n      userInput: '',\n      todos: todos\n    };\n  }\n\n  changeInput = event => {\n    this.setState({\n      userInput: event.target.value\n    });\n  };\n\n  handleSubmit = evt => {\n    const newTodo = {\n      id: Date.now(),\n      value: this.state.userInput,\n      done: false\n    };\n    const todos = [...this.state.todos, newTodo];\n\n    evt.preventDefault();\n    this.setState({\n      todos,\n      userInput: ''\n    });\n  };\n\n  handleEdit = (evt, index, handleClick, editedContent) => {\n    evt.preventDefault();\n\n    var todos = [...this.state.todos];\n    var indexx = todos.findIndex(todo => todo.id === index);\n    todos[indexx].value = editedContent;\n    todos[indexx].done = this.state.todos[indexx].done;\n\n    this.setState({ todos });\n    handleClick();\n  };\n  handleDelete = index => {\n    let todos = this.state.todos.filter(todo => {\n      return todo.id !== index;\n    });\n\n    this.setState({ todos });\n  };\n\n  handleComplete = index => {\n    const todos = this.state.todos;\n    var indexx = todos.findIndex(todo => todo.id === index);\n    todos[indexx].done = !todos[indexx].done;\n\n    this.setState({ todos });\n  };\n\n  setActiveState = active => {\n    this.setState({\n      active\n    });\n  };\n  changeSearch = evt => {\n    this.setState({\n      searchField: evt.target.value\n    });\n  };\n  handleSearch = evt => {\n    evt.preventDefault();\n    this.setState({\n      searchField: ''\n    });\n  };\n  render() {\n    window.localStorage.clear();\n    window.localStorage.setItem('todoData', JSON.stringify(this.state.todos));\n\n    return (\n      <div className='App clearfix'>\n        <div className='header clearfix'>\n          <h1>Todolist</h1>\n          <Input\n            value='search'\n            userInput={this.state.searchField}\n            onSubmit={this.handleSearch}\n            handleChange={this.changeSearch}\n          />\n        </div>\n\n        <Input\n          handleChange={this.changeInput}\n          userInput={this.state.userInput}\n          onSubmit={this.handleSubmit}\n          value='Add'\n        />\n        <Tab\n          setActiveState={this.setActiveState}\n          activeState={this.state.active}\n        />\n\n        <TaskList\n          searchField={this.state.searchField}\n          activeState={this.state.active}\n          todos={this.state.todos}\n          handleSubmit={this.handleSubmit}\n          userInput={this.state.userInput}\n          handleComplete={this.handleComplete}\n          handleDelete={this.handleDelete}\n          handleEdit={this.handleEdit}\n          changeInput={this.changeInput}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}